{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Whitehacker18/AI-PROJECT-EDUNET/blob/main/Employee_Salary_Prediction_Python_Code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        from sklearn.model_selection import train_test_split
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "import joblib # For saving and loading the model\n",
        "\n",
        "\n",
        "# Set a random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# --- 2. Data Generation (Synthetic Data) ---\n",
        "\n",
        "\n",
        "print(\"Generating synthetic employee salary data...\")\n",
        "\n",
        "num_employees = 1000\n",
        "\n",
        "# Features\n",
        "experience_years = np.random.randint(0, 25, num_employees)\n",
        "education_level = np.random.choice(['High School', 'Bachelors', 'Masters', 'PhD'], num_employees, p=[0.15, 0.5, 0.3, 0.05])\n",
        "job_role = np.random.choice(['Software Engineer', 'Data Scientist', 'HR Specialist', 'Project Manager', 'Sales Representative'], num_employees)\n",
        "location = np.random.choice(['New York', 'San Francisco', 'Austin', 'Chicago', 'Remote'], num_employees)\n",
        "performance_rating = np.random.randint(1, 6, num_employees) # 1-5 scale\n",
        "\n",
        "# Simulate salary based on features (with some noise)\n",
        "# Base salary depends on experience, education, and role\n",
        "base_salary = (\n",
        "    10000 * experience_years +\n",
        "    np.where(education_level == 'Bachelors', 15000,\n",
        "             np.where(education_level == 'Masters', 30000,\n",
        "                      np.where(education_level == 'PhD', 50000, 0))) +\n",
        "    np.where(job_role == 'Software Engineer', 20000,\n",
        "             np.where(job_role == 'Data Scientist', 25000,\n",
        "                      np.where(job_role == 'Project Manager', 18000,\n",
        "                               np.where(job_role == 'Sales Representative', 10000, 5000))))\n",
        ")\n",
        "\n",
        "# Add influence of performance and location\n",
        "salary = base_salary + (performance_rating * 5000) + np.random.normal(0, 10000, num_employees)\n",
        "\n",
        "# Adjust for location (e.g., San Francisco is higher)\n",
        "salary = np.where(location == 'San Francisco', salary * 1.2, salary)\n",
        "salary = np.where(location == 'New York', salary * 1.1, salary)\n",
        "\n",
        "# Ensure salaries are non-negative\n",
        "salary = np.maximum(50000, salary) # Minimum salary of 50,000\n",
        "\n",
        "# Create DataFrame\n",
        "data = pd.DataFrame({\n",
        "    'ExperienceYears': experience_years,\n",
        "    'EducationLevel': education_level,\n",
        "    'JobRole': job_role,\n",
        "    'Location': location,\n",
        "    'PerformanceRating': performance_rating,\n",
        "    'Salary': salary\n",
        "})\n",
        "\n",
        "print(\"Synthetic data generated successfully. First 5 rows:\")\n",
        "print(data.head())\n",
        "print(\"\\nData Info:\")\n",
        "data.info()\n",
        "print(\"\\nMissing values check:\")\n",
        "print(data.isnull().sum()) # Should be all zeros for synthetic data\n",
        "\n",
        "# --- 3. Data Preprocessing ---\n",
        "# Define features (X) and target (y)\n",
        "X = data.drop('Salary', axis=1)\n",
        "y = data['Salary']\n",
        "\n",
        "# Identify numerical and categorical features\n",
        "numerical_features = ['ExperienceYears', 'PerformanceRating']\n",
        "categorical_features = ['EducationLevel', 'JobRole', 'Location']\n",
        "\n",
        "# Create a preprocessing pipeline\n",
        "# ColumnTransformer applies different transformers to different columns\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', StandardScaler(), numerical_features), # Scale numerical features\n",
        "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features) # One-hot encode categorical features\n",
        "    ])\n",
        "\n",
        "# --- 4. Model Selection and Pipeline Creation ---\n",
        "# We'll use a RandomForestRegressor as it's generally robust and performs well.\n",
        "# The pipeline will first preprocess the data and then train the model.\n",
        "\n",
        "print(\"\\nBuilding and training the model pipeline...\")\n",
        "\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)) # Use all available cores\n",
        "])\n",
        "\n",
        "# --- 5. Model Training and Evaluation ---\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"\\n--- Model Evaluation Results ---\")\n",
        "print(f\"Mean Absolute Error (MAE): ${mae:,.2f}\")\n",
        "print(f\"Mean Squared Error (MSE): ${mse:,.2f}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): ${rmse:,.2f}\")\n",
        "print(f\"R-squared (RÂ²): {r2:.4f}\")\n",
        "\n",
        "# --- 6. Model Persistence (Saving the trained model) ---\n",
        "# You can save the trained pipeline to a file for later use without retraining\n",
        "model_filename = 'employee_salary_prediction_model.joblib'\n",
        "joblib.dump(model_pipeline, model_filename)\n",
        "print(f\"\\nModel saved to '{model_filename}'\")\n",
        "\n",
        "# --- Example of Loading and Using the Model ---\n",
        "print(\"\\n--- Demonstrating loading and using the saved model ---\")\n",
        "loaded_model = joblib.load(model_filename)\n",
        "\n",
        "# Create new data for prediction\n",
        "new_employee_data = pd.DataFrame([{\n",
        "    'ExperienceYears': 10,\n",
        "    'EducationLevel': 'Masters',\n",
        "    'JobRole': 'Data Scientist',\n",
        "    'Location': 'San Francisco',\n",
        "    'PerformanceRating': 5\n",
        "}])\n",
        "\n",
        "predicted_salary = loaded_model.predict(new_employee_data)\n",
        "print(f\"\\nPredicted salary for new employee: ${predicted_salary[0]:,.2f}\")\n",
        "\n",
        "# Another example\n",
        "new_employee_data_2 = pd.DataFrame([{\n",
        "    'ExperienceYears': 2,\n",
        "    'EducationLevel': 'Bachelors',\n",
        "    'JobRole': 'HR Specialist',\n",
        "    'Location': 'Austin',\n",
        "    'PerformanceRating': 3\n",
        "}])\n",
        "predicted_salary_2 = loaded_model.predict(new_employee_data_2)\n",
        "print(f\"Predicted salary for another new employee: ${predicted_salary_2[0]:,.2f}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating synthetic employee salary data...\n",
            "Synthetic data generated successfully. First 5 rows:\n",
            "   ExperienceYears EducationLevel               JobRole  Location  \\\n",
            "0                6      Bachelors  Sales Representative   Chicago   \n",
            "1               19      Bachelors       Project Manager    Austin   \n",
            "2               14      Bachelors        Data Scientist  New York   \n",
            "3               10      Bachelors       Project Manager   Chicago   \n",
            "4                7      Bachelors     Software Engineer    Remote   \n",
            "\n",
            "   PerformanceRating         Salary  \n",
            "0                  4  121672.241116  \n",
            "1                  3  253232.386217  \n",
            "2                  5  233591.841970  \n",
            "3                  1  155817.989088  \n",
            "4                  1   93433.767923  \n",
            "\n",
            "Data Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000 entries, 0 to 999\n",
            "Data columns (total 6 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   ExperienceYears    1000 non-null   int64  \n",
            " 1   EducationLevel     1000 non-null   object \n",
            " 2   JobRole            1000 non-null   object \n",
            " 3   Location           1000 non-null   object \n",
            " 4   PerformanceRating  1000 non-null   int64  \n",
            " 5   Salary             1000 non-null   float64\n",
            "dtypes: float64(1), int64(2), object(3)\n",
            "memory usage: 47.0+ KB\n",
            "\n",
            "Missing values check:\n",
            "ExperienceYears      0\n",
            "EducationLevel       0\n",
            "JobRole              0\n",
            "Location             0\n",
            "PerformanceRating    0\n",
            "Salary               0\n",
            "dtype: int64\n",
            "\n",
            "Building and training the model pipeline...\n",
            "\n",
            "--- Model Evaluation Results ---\n",
            "Mean Absolute Error (MAE): $12,018.77\n",
            "Mean Squared Error (MSE): $229,975,435.97\n",
            "Root Mean Squared Error (RMSE): $15,164.94\n",
            "R-squared (RÂ²): 0.9642\n",
            "\n",
            "Model saved to 'employee_salary_prediction_model.joblib'\n",
            "\n",
            "--- Demonstrating loading and using the saved model ---\n",
            "\n",
            "Predicted salary for new employee: $194,005.49\n",
            "Predicted salary for another new employee: $62,178.24\n"
          ]
        }
      ],
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Rld4yg3kHwi",
        "outputId": "bc608ae2-fb33-4a64-ec3a-aebd96c0bffe"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
